% Script to create robot arm with symbolic parameters
clear
startup_rvc;
syms Lh Lua Lfa Iua1 Iua2 Iua3 Ifa1 Ifa2 Ifa3 Ih_rot1 Ih_rot2 Ih_rot3 CMua mua mfa CMfa CMh mh 'real'
a = [0, 0,   0,    0, 0,    0, Lh];
d = [0, 0, -Lua, 0, -Lfa, 0,   0];

% carrying_angle = -0.244890724;
carrying_angle = 0;


L(1) = Revolute('d', d(1), 'a', a(1), 'alpha', pi/2, ...       
    'I', [0, 0, 0; 0, 0, 0; 0, 0, 0], ...                        
    'r', [0, 0, 0], ...                                  
    'm', 0,...
    'offset', -pi/2);                                             

L(2) = Revolute('d', d(2), 'a', a(2), 'alpha', pi/2, ...
    'I', [0, 0, 0; 0, 0, 0; 0, 0, 0], ...
    'r', [0, 0, 0], ...
    'm', 0,...
    'offset', pi/2);

L(3) = Revolute('d', d(3), 'a', a(3), 'alpha', pi/2,  ...
    'I', diag([Iua1 Iua2 Iua3]),...
    'r', [0, (Lua-CMua), 0], ...
    'm', mua,...
    'offset', pi/2);

L(4) = Revolute('d', d(4), 'a', a(4), 'alpha', -pi/2+carrying_angle,  ...
    'I', [0, 0, 0; 0, 0, 0; 0, 0, 0], ...
    'r', [0, 0, 0], ...
    'm', 0);

L(5) = Revolute('d', d(5), 'a', a(5), 'alpha', pi/2,  ...       % pro sup - defined sup as positive for simplicity
    'I', diag([Ifa1 Ifa2 Ifa3]), ...
    'r', [0, (Lfa-CMfa), 0], ...
    'm', mfa);

L(6) = Revolute('d', d(6), 'a', a(6), 'alpha', -pi/2,  ...         % Flexion Extension - defined positive as flexion
    'I', [0, 0, 0; 0, 0, 0; 0, 0, 0], ...
    'r', [0, 0, 0], ...
    'm', 0,...
    'offset', -pi/2 );

L(7) = Revolute('d', d(7), 'a', a(7), 'alpha', 0,  ...          % RUD - defined ulnar deivation as positive
    'I', diag([Ih_rot1 Ih_rot2 Ih_rot3]), ...
    'r', [-(Lh-CMh), 0, 0], ...
    'm', mh);

% combine links into robotic chain    
R7 = SerialLink(L, 'name', 'Charles');%,'gravity', G); %,'base', base)%, 'ikine', 'puma', 'comment', 'viscous friction; params of 8/95');

% gravity - we did not ever include gravity (would not change things anyway)
R7.gravity = [0, 0, 0];

R7.base = [-1,  0, 0, 0;
         0, -1, 0, 0;
         0,  0, 1, 0;
         0,  0, 0, 1];

save("R7.mat", "R7");

syms q1 q2 q3 q4 q5 q6 q7 'real'
qsym = [q1 q2 q3 q4 q5 q6 q7];
T = R7.fkine(qsym);
t = T.transl;

%% Get Jacobian
J = jacobian(t, qsym);
save("mats/J.mat", "J");